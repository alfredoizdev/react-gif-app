{"version":3,"sources":["components/AddCategorie.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategorie","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","placeholder","value","onChange","target","handleChange","GifGridItem","id","title","url","className","src","alt","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","useEffect","then","setState","loading","state","GifGrid","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uMAkCeA,EA/BM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAe1C,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,kBACGJ,EAAWK,OAAOC,OAAS,IAEhCR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,OAKZ,2BACEO,KAAK,OACLC,YAAY,iBACZC,MAAOV,EACPW,SAAU,SAACR,GAAD,OAlBK,SAACA,GACpBF,EAAcE,EAAES,OAAOF,OAiBFG,CAAaV,QCbvBW,EATK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCYKK,EAlBF,uCAAG,WAAOd,GAAP,uBAAAe,EAAA,6DACRL,EADQ,0FACiFM,UAC7FhB,GAFY,sBAIKiB,MAAMP,GAJX,cAIRQ,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,QAXxB,kBAePW,GAfO,4CAAH,sDCmBEK,EAhBM,SAAC1B,GACpB2B,qBAAU,WACRb,EAAQd,GAAU4B,MAAK,SAAAL,GAAG,OAAIM,EAAS,CACnCT,KAAMG,EACNO,SAAS,SAEZ,CAAC9B,IAN6B,MAQPR,mBAAS,CACjC4B,KAAM,GACNU,SAAS,IAVsB,mBAQ1BC,EAR0B,KAQnBF,EARmB,KAajC,OAAOE,GCSMC,EApBC,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SAAe,EACC0B,EAAa1B,GAAjCwB,EADmB,EACxBJ,KAAaU,EADW,EACXA,QAErB,OACE,6BACE,4BAAK9B,GACJ8B,GAAW,0BAAMnB,UAAU,yCAAhB,cACZ,0BAAMA,UAAU,QACba,EAAOF,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaU,IAAKV,EAAIf,IAAQe,UCSzBW,G,MAjBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,kBADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,6BACE,0CACA,kBAAC,EAAD,CAAcA,cAAeA,IAC7B,6BACA,4BACG4C,EAAWb,KAAI,SAACtB,GAAD,OACd,wBAAIiC,IAAKjC,GAAW,kBAAC,EAAD,CAASA,SAAUA,Y,MCVjDoC,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,U","file":"static/js/main.54a3f5f8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategorie = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!inputValue.trim().length > 2) return;\n\n    setCategories((category) => [inputValue, ...category]);\n    setInputValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        placeholder='Add categories'\n        value={inputValue}\n        onChange={(e) => handleChange(e)}\n      />\n    </form>\n  );\n};\n\nAddCategorie.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategorie;\n","import React from \"react\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=EdBW5oKXE4qsGnswwvG1CkzBnZs5KP95&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n  useEffect(() => {\n    getGifs(category).then(img => setState({\n        data: img,\n        loading: false\n    }));\n  }, [category]);\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GifGridItem from \"./GifGridItem\";\nimport useFetchGifs from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <div>\n      <h2>{category}</h2>\n      {loading && <span className=\"card animate__animated animate__flash\">Loading...</span>}\n      <main className='main'>\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </main>\n    </div>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from \"react\";\nimport AddCategorie from \"./components/AddCategorie\";\nimport GifGrid from \"./components/GifGrid\";\nimport 'animate.css/animate.css';\n\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch man\"]);\n\n  return (\n    <div>\n      <h2>Gif expert</h2>\n      <AddCategorie setCategories={setCategories} />\n      <hr />\n      <ul>\n        {categories.map((category) => (\n          <li key={category} ><GifGrid category={category} /></li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n   <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}